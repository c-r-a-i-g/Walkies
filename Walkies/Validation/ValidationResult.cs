using System;
using System.Collections.Generic;
using System.Configuration;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Walkies
{
    /// <summary>
    /// Used to return validation results.
    /// </summary>
    public class ModelValidationResult
    {

        /* ----------------------------------------------------------------------------------------------------------------------------------------- */

        #region Class Members

        #endregion

        /* ----------------------------------------------------------------------------------------------------------------------------------------- */

        #region Constructor & Intialisation

        /// <summary>
        /// Creates a new instance of the validation result where no description is specified.
        /// Usually used if there is no error.
        /// </summary>
        /// <param name="isValid">Whether or not the validation was successful.</param>
        public ModelValidationResult( bool isValid, bool displayNotification = true )
            : this( isValid, "", null, displayNotification )
        {

        }

        /// <summary>
        /// Creates a new instance of the validation result where a description is specified.
        /// Usually used if there is an error.
        /// </summary>
        /// <param name="isValid">Whether or not the validation was successful.</param>
        /// <param name="message">The description of the validation results.</param>
        public ModelValidationResult( bool isValid, string message, bool displayNotification = true )
            : this( isValid, message, null, displayNotification )
        {

        }

        /// <summary>
        /// Creates a new instance of the validation result where an exception is to be used as the error message.
        /// </summary>
        /// <param name="isValid">Whether or not the validation was successful.</param>
        /// <param name="exception">The exception that occurred, causing the validation to fail.</param>
        public ModelValidationResult( bool isValid, Exception exception, bool displayNotification = true )
            : this( isValid, "", exception, displayNotification )
        {

        }

        /// <summary>
        /// Creates a new instance of the validation result where an exception is to be used in the error message.
        /// Usually used 
        /// </summary>
        /// <param name="isValid">Whether or not the validation was successful.</param>
        /// <param name="message">The description of the validation results.</param>
        /// <param name="exception">The exception that occurred, causing the validation to fail.</param>
        public ModelValidationResult( bool isValid, string message, Exception exception, bool displayNotification = true )
        {
            this.IsValid = isValid;
            this.Message = message;
            this.DisplayNotification = displayNotification;

            this.OriginalException = exception;
        }

        #endregion

        /* ----------------------------------------------------------------------------------------------------------------------------------------- */

        #region Public Methods

        #endregion

        /* ----------------------------------------------------------------------------------------------------------------------------------------- */

        #region Static Methods

        #endregion

        /* ----------------------------------------------------------------------------------------------------------------------------------------- */

        #region Private Methods

        /// <summary>
        /// Builds an exception message based off the exception given. SolrCore through inner exceptions as well.
        /// </summary>
        /// <param name="exception">The exception to start building the message from.</param>
        /// <returns>The message that was generated by the exception.</returns>
        private string BuildExceptionMessage( Exception exception )
        {
            string description = "";

            // Only add the exception message if the exception message is not just telling us to look at the inner exception.
            if ( exception.Message.Contains( "See inner exception for details" ) == false )
            {
                description = exception.Message;
            }

            // If there is an inner exception, we need to get that message too.
            if ( exception.InnerException != null )
            {
                description += " - " + BuildExceptionMessage( exception.InnerException );
            }

            return description;
        }

        #endregion

        /* ----------------------------------------------------------------------------------------------------------------------------------------- */

        #region Properties

        /// <summary>
        /// Whether or not the item validated successfully.
        /// </summary>
        public bool IsValid { get; set; }

        /// <summary>
        /// The reason why the object did not validate (or why it did).
        /// </summary>
        public string Message { get; set; }

        /// <summary>
        /// The original exception that was thrown (if any).
        /// </summary>
        public Exception OriginalException { get; set; }

        /// <summary>
        /// Whether or not to display the notification in the json result for the client.
        /// </summary>
        public bool DisplayNotification { get; set; }

        #endregion

        /* ----------------------------------------------------------------------------------------------------------------------------------------- */

    }
}
